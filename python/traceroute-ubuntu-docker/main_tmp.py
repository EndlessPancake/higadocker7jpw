import sys
import time
import os
import subprocess
import configparser
from scapy.as_resolvers import AS_resolver_radb
from scapy.all import traceroute
import cairo
import rsvg
from xml.dom import minidom

## config
iniesta = configparser.ConfigParser()
iniesta.read('./config.ini', 'UTF-8')
domains = iniesta['targets']['host']
target = domains.split(' ')
# scapy rule => int()
dst_port = int(iniesta['targets']['port'])
svg_file = iniesta['graph']['svg']
png_file = iniesta['graph']['png']

## convert svg to png
def convert_svg_to_png(svg_file, output_file):
    # Get the svg files content
    with open(svg_file) as f:
        svg_data = f.read()

    # Get the width / height inside of the SVG
    doc = minidom.parse(svg_file)
    width = int([path.getAttribute('width') for path
                 in doc.getElementsByTagName('svg')][0])
    height = int([path.getAttribute('height') for path
                  in doc.getElementsByTagName('svg')][0])
    doc.unlink()

    # create the png
    img = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
    ctx = cairo.Context(img)
    handler = rsvg.Handle(None, str(svg_data))
    handler.render_cairo(ctx)
    img.write_to_png(output_file)

if __name__ == '__main__':

  if len(target) >= 1 and target[0] != '':
     # Start Route Tracking
     res, unans = traceroute(domains, dport=dst_port, retry=-2)
     # The information generated by traceroute is rendered as svg
     # -- Change ASres=AS_resolver_radb() to a available whois provider instead of the default qiang provider after the original AS res=None
     res.graph(target="> svg_file", ASres=AS_resolver_radb(), type="svg")
     time.sleep(1)
     ## hummm....
     # subprocess.Popen("/usr/bin/convert graph.svg /tmp/graph.png", shell=True)
     convert_svg_to_png(svg_file, png_file)
  else:
    print("IP/domain number of errors, exit")
